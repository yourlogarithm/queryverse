services:
  crawler-api:
    build:
      context: .
      dockerfile: crawler-api/Dockerfile
    restart: always
    ports:
      - 8000:8000
    expose:
      - 8000
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - RUST_LOG=DEBUG
      - QDRANT_URI=http://qdrant:6334
      - MONGO_URI=mongodb://admin:password@mongodb:27017
      - AMQP_URI=amqp://rabbitmq:5672
      - REDIS_URI=redis://redis:6379
      - JAEGER_HOST=jaeger:6831
      - TEXT_EMBEDDINGS_INFERENCE_API=http://text-embeddings-inference-api:8000

  selector-service:
    build:
      context: .
      dockerfile: selector-service/Dockerfile
    restart: always
    ports:
      - 8010:8000
    expose:
      - 8000
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - RUST_LOG=DEBUG
      - CRAWLER_API=http://crawler-api:8000
      - REDIS_URI=redis://redis:6379
      - AMQP_URI=amqp://rabbitmq:5672
      - AMQP_USR=guest
      - AMQP_PWD=guest
      - JAEGER_HOST=jaeger:6831
      - RABBITMQ_MANAGEMENT_HOST=http://rabbitmq:15672/api

  text-embeddings-inference-api:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-latest
    ports:
      - 8020-8030:8000
    expose:
      - 8000
    deploy:
      mode: replicated
      replicas: 10
      endpoint_mode: vip
    volumes:
      - ./data:/data
    command:
      [
        "--model-id",
        "thenlper/gte-small",
        "--port",
        "8000",
        "--otlp-endpoint",
        "http://jaeger:4317",
        "--payload-limit",
        "200000000",
        "--max-concurrent-requests",
        "1024",
      ]

  redis:
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --save 20 1 --loglevel warning
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    expose:
      - 5672
      - 15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./data/rabbitmq/data:/var/lib/rabbitmq
      - ./data/rabbitmq/log:/var/log/rabbitmq

  mongodb:
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    expose:
      - 27017
    healthcheck:
      test: echo 'db.runCommand("ping")' | mongo admin -u admin -p password --quiet
      interval: 30s
      timeout: 30s
      retries: 3
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo:/data/db

  mongo-express:
    image: mongo-express:latest
    restart: always
    ports:
      - 8081:8081
    expose:
      - 8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH: "false"

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - ./data/qdrant:/qdrant/storage

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana

configs:
  qdrant_config:
    content: |
      log_level: INFO

volumes:
  grafana-storage:
